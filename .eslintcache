[{"/Users/kohei.kubota/my_dev/udemy/jira_react/src/index.tsx":"1","/Users/kohei.kubota/my_dev/udemy/jira_react/src/features/counter/Counter.tsx":"2","/Users/kohei.kubota/my_dev/udemy/jira_react/src/features/counter/counterSlice.ts":"3","/Users/kohei.kubota/my_dev/udemy/jira_react/src/features/auth/authSlice.ts":"4","/Users/kohei.kubota/my_dev/udemy/jira_react/src/app/store.ts":"5","/Users/kohei.kubota/my_dev/udemy/jira_react/src/serviceWorker.ts":"6"},{"size":648,"mtime":1611396829085,"results":"7","hashOfConfig":"8"},{"size":1626,"mtime":1611396829082,"results":"9","hashOfConfig":"8"},{"size":1851,"mtime":1611396829083,"results":"10","hashOfConfig":"8"},{"size":4270,"mtime":1611477335215,"results":"11","hashOfConfig":"8"},{"size":545,"mtime":1611477230797,"results":"12","hashOfConfig":"8"},{"size":5424,"mtime":1611396829086,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ep30zd",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kohei.kubota/my_dev/udemy/jira_react/src/index.tsx",[],"/Users/kohei.kubota/my_dev/udemy/jira_react/src/features/counter/Counter.tsx",[],"/Users/kohei.kubota/my_dev/udemy/jira_react/src/features/counter/counterSlice.ts",[],"/Users/kohei.kubota/my_dev/udemy/jira_react/src/features/auth/authSlice.ts",["27","28"],"import { createSlice, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport axios from \"axios\";\nimport {\n  AUTH_STATE,\n  CRED,\n  LOGIN_USER,\n  POST_PROFILE,\n  PROFILE,\n  JWT,\n  USER,\n} from \"../types\";\n\n// loginするための非同期関数\nexport const fetchAsyncLogin = createAsyncThunk(\n  \"auth/login\", // アクション名\n  async (auth: CRED) => {\n    const res = await axios.post<JWT>(\n      `${process.env.REACT_APP_API_URL}/authen/jwt/create`,\n      auth,\n      {\n        headers: {\n          \"Content-Type\": \"appplication/json\",\n        },\n      }\n    );\n    return res.data;\n  }\n);\n\n// 新規ユーザー作成のための非同期関数\nexport const fetchAsyncRegister = createAsyncThunk(\n  \"auth/register\",\n  async (auth: CRED) => {\n    const res = await axios.post<USER>(\n      `${process.env.REACT_APP_API_URL}/api/create`,\n      auth,\n      {\n        headers: {\n          \"Content-Type\": \"appplication/json\",\n        },\n      }\n    );\n    return res.data;\n  }\n);\n\n// ログインしているユーザー情報\nexport const fetchAsyncGetMyProf = createAsyncThunk(\n  \"auth/loginuser\",\n  async () => {\n    const res = await axios.get<LOGIN_USER>(\n      `${process.env.REACT_APP_API_URL}/api/loginuser/`,\n      {\n        headers: {\n          Authorization: `JWT ${localStorage.localJWT}`,\n        },\n      }\n    );\n    return res.data;\n  }\n);\n\n// profile新規作成(自動生成)\nexport const fetchAsyncCreateProf = createAsyncThunk(\n  \"auth/createProfile\",\n  async () => {\n    const res = await axios.post<PROFILE>(\n      `${process.env.REACT_APP_API_URL}/api/profile/`,\n      { img: null },\n      {\n        headers: {\n          Authorization: `JWT ${localStorage.localJWT}`,\n          \"Content-Type\": \"appplication/json\",\n        },\n      }\n    );\n  }\n);\n\n// profile一覧取得\nexport const fetchAsyncGetProfs = createAsyncThunk(\n  \"auth/loginuser\",\n  async () => {\n    const res = await axios.get<PROFILE[]>(\n      `${process.env.REACT_APP_API_URL}/api/profile/`,\n      {\n        headers: {\n          Authorization: `JWT ${localStorage.localJWT}`,\n          \"Content-Type\": \"appplication/json\",\n        },\n      }\n    );\n  }\n);\n\n// profile更新\nexport const fetchAsyncUpdateProf = createAsyncThunk(\n  \"auth/updateProfile\",\n  async (profile: POST_PROFILE) => {\n    const uploadData = new FormData();\n    profile.img && uploadData.append(\"img\", profile.img, profile.img.name);\n    const res = await axios.put<PROFILE>(\n      `${process.env.REACT_APP_API_URL}/api/profile/${profile.id}`,\n      uploadData,\n      {\n        headers: {\n          Authorization: `JWT ${localStorage.localJWT}`,\n          \"Content-Type\": \"appplication/json\",\n        },\n      }\n    );\n    return res.data;\n  }\n);\n\nconst initialState: AUTH_STATE = {\n  isLoginView: true,\n  loginUser: {\n    id: 0,\n    username: \"\",\n  },\n  profiles: [{ id: 0, user_profile: 0, img: null }],\n};\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    toggleMode(state) {\n      state.isLoginView = !state.isLoginView;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(\n      fetchAsyncLogin.fulfilled,\n      (state, action: PayloadAction<JWT>) => {\n        // payload = res.data\n        localStorage.setItem(\"localJWT\", action.payload.access);\n        action.payload.access && (window.location.href = \"/tasks\");\n      }\n    );\n    builder.addCase(\n      fetchAsyncGetMyProf.fulfilled,\n      (state, action: PayloadAction<LOGIN_USER>) => {\n        // payload = res.data\n        return {\n          ...state,\n          loginUser: action.payload,\n        };\n      }\n    );\n    builder.addCase(\n      fetchAsyncUpdateProf.fulfilled,\n      (state, action: PayloadAction<PROFILE>) => {\n        return {\n          ...state,\n          profiles: state.profiles.map((prof) =>\n            prof.id === action.payload.id ? action.payload : prof\n          ),\n        };\n      }\n    );\n  },\n});\n\nexport const { toggleMode } = authSlice.actions;\n\nexport const selectIsLoginView = (state: RootState) => state.auth.isLoginView;\nexport const selectLoginUser = (state: RootState) => state.auth.loginUser;\nexport const selectProfiles = (state: RootState) => state.auth.profiles;\n\nexport default authSlice.reducer;\n","/Users/kohei.kubota/my_dev/udemy/jira_react/src/app/store.ts",[],"/Users/kohei.kubota/my_dev/udemy/jira_react/src/serviceWorker.ts",[],{"ruleId":"29","severity":1,"message":"30","line":68,"column":11,"nodeType":"31","messageId":"32","endLine":68,"endColumn":14},{"ruleId":"29","severity":1,"message":"30","line":85,"column":11,"nodeType":"31","messageId":"32","endLine":85,"endColumn":14},"@typescript-eslint/no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar"]